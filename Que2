Given a sorted array of integers, implement a function that returns the index of the first occurrence of a given number give code in rust


code: fn first_occurrence(arr: &[i32], target: i32) -> Option<usize> {
    let mut left = 0;
    let mut right = arr.len() - 1;
    while left <= right {
        let mid = left + (right - left) / 2;
        if arr[mid] == target {
            // Check if this is the first occurrence
            if mid == 0 || arr[mid - 1] != target {
                return Some(mid);
            } else {
                right = mid - 1; // Continue searching on the left side
            }
        } else if arr[mid] < target {
            left = mid + 1; // Search on the right side
        } else {
            right = mid - 1; // Search on the left side
        }
    }
    None // Return None if the target is not found
}

fn main() {
    let arr = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6];
    let target = 4;
    if let Some(index) = first_occurrence(&arr, target) {
        println!("The first occurrence of {} is at index {}", target, index);
    } else {
        println!("{} is not found in the array.", target);
    }
}

This function uses a binary search algorithm to efficiently locate the target value in the sorted array. If the target value is found, it checks whether it's the first occurrence by comparing it with the element before it. If it's the first occurrence, it returns its index; otherwise, it continues searching on the left side of the array.
