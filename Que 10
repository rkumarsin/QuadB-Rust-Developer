fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    if n <= 3 {
        return true;
    }
    if n % 2 == 0 || n % 3 == 0 {
        return false;
    }
    let mut i = 5;
    while i * i <= n {
        if n % i == 0 || n % (i + 2) == 0 {
            return false;
        }
        i += 6;
    }
    true
}

fn main() {
    let num = 17;
    if is_prime(num) {
        println!("{} is a prime number.", num);
    } else {
        println!("{} is not a prime number.", num);
    }
}
This function checks if the number is less than or equal to 1, returning false if it is. Then, it checks if the number is 2 or 3, returning true in those cases. Next, it checks if the number is divisible by 2 or 3, returning false if it is. Finally, it iterates from 5 to the square root of the number in steps of 6, checking if the number is divisible by any of these values (i or i+2). If any of these conditions hold, it returns false. Otherwise, it returns true, indicating that the number is prime.
