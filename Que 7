fn kth_smallest(arr: &[i32], k: usize) -> Option<i32> {
    if k > 0 && k <= arr.len() {
        let mut sorted_arr = arr.to_vec();
        sorted_arr.sort();
        Some(sorted_arr[k - 1])
    } else {
        None
    }
}

fn main() {
    let arr = [7, 10, 4, 3, 20, 15];
    let k = 3;
    if let Some(kth_smallest) = kth_smallest(&arr, k) {
        println!("The {}th smallest element is: {}", k, kth_smallest);
    } else {
        println!("Invalid value of k or empty array.");
    }
}
This function takes a slice of integers arr and a usize value k as input. It checks if k is within the valid range (between 1 and the length of the array inclusive). If k is valid, it creates a mutable copy of the array, sorts it, and returns the element at the (k - 1) index. If k is invalid or the array is empty, it returns None.
